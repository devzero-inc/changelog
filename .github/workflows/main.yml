name: Change Log CI

on:
  push:
    branches: [ main ]
    paths:
      - '**'
  pull_request:
    branches: [ main ]
    paths:
      - '**'

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Bun
      run: |
        curl -fsSL https://bun.sh/install | bash
        echo "$HOME/.bun/bin" >> $GITHUB_PATH
        $HOME/.bun/bin/bun --version

    # Adding Node.js setup for linting since Bun doesn't support any linter
    # and doesn't provide a built-in linter.
    - name: Set up Node.js for linting
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install backend dependencies
      run: |
        cd backend
        bun install

    - name: Lint backend code
      run: |
        cd backend
        bun run lint

    - name: Run backend tests
      run: |
        cd backend
        bun test

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Bun
      run: |
        curl -fsSL https://bun.sh/install | bash
        echo "$HOME/.bun/bin" >> $GITHUB_PATH
        $HOME/.bun/bin/bun --version

    # Adding Node.js setup for linting since Bun doesn't support any linter
    # and doesn't provide a built-in linter.
    - name: Set up Node.js for linting
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: |
        cd frontend
        bun install

    - name: Lint frontend code
      run: |
        cd frontend
        bun run lint

    - name: Run frontend tests
      run: |
        cd frontend
        bun test

  check-docker-compose:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - uses: actions/checkout@v2

      - name: Start services
        run: docker-compose up -d

      - name: Wait for front_end service to become healthy
        run: |
          echo "Waiting for front_end service to become healthy..."
          RETRIES=10
          while [ $RETRIES -gt 0 ]; do
            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(docker-compose ps -q front_end))
            if [ "$HEALTH_STATUS" == "healthy" ]; then
              echo "front_end service is healthy."
              break
            else
              echo "Waiting for front_end service to become healthy. Current status: $HEALTH_STATUS"
              sleep 10
              RETRIES=$((RETRIES-1))
            fi
          done

          if [ $RETRIES -le 0 ]; then
            echo "front_end service did not become healthy in time."
            exit 1
          fi

      - name: Shutdown services
        run: docker-compose down